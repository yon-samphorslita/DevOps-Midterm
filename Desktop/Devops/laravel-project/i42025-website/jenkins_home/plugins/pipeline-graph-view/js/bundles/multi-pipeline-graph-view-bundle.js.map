{"version":3,"file":"multi-pipeline-graph-view-bundle.js","sources":["../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/support/startPollingRunsStatus.ts","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/SingleRun.tsx","../../../frontend/multi-pipeline-graph-view/multi-pipeline-graph/main/MultiPipelineGraph.tsx","../../../frontend/multi-pipeline-graph-view/app.tsx","../../../frontend/multi-pipeline-graph-view/index.tsx"],"sourcesContent":["import { RunInfo } from \"../MultiPipelineGraphModel.ts\";\n\n/**\n * Starts polling the server to retrieve pipeline status.\n * Will only stop once the run is finished.\n */\nexport default function startPollingRunsStatus(\n  pathPrefix: string,\n  onFetchSuccess: (data: Array<RunInfo>) => void,\n  onFetchError: (err: Error) => void,\n  interval = 10000,\n) {\n  let path = pathPrefix + \"multi-pipeline-graph/runs\";\n\n  async function fetchPipelineData() {\n    try {\n      const res = await fetch(path);\n      const result = await res.json();\n      onFetchSuccess(result.data);\n    } catch (err) {\n      // TODO: implement exponential backoff of the timeout interval\n      onFetchError(err);\n    } finally {\n      setTimeout(() => fetchPipelineData(), interval);\n    }\n  }\n  fetchPipelineData();\n}\n","import React, { useState } from \"react\";\nimport { RunInfo } from \"./MultiPipelineGraphModel.ts\";\nimport {\n  LayoutInfo,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/index.ts\";\nimport { PipelineGraph } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraph.tsx\";\nimport { defaultLayout } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { time, Total } from \"../../../common/utils/timings.tsx\";\nimport \"./single-run.scss\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\n\nexport default function SingleRun({ run, currentJobPath }: SingleRunProps) {\n  const [stages, setStages] = useState<Array<StageInfo>>([]);\n\n  const layout: LayoutInfo = {\n    ...defaultLayout,\n    nodeSpacingH: 45,\n  };\n\n  return (\n    <div className=\"pgv-single-run\">\n      <div>\n        <a href={currentJobPath + run.id} className=\"pgw-user-specified-text\">\n          <StatusIcon status={run.result} />\n          {run.displayName}\n          <span>\n            {time(run.timestamp)} - <Total ms={run.duration} />\n          </span>\n        </a>\n      </div>\n      <PipelineGraph\n        stages={stages}\n        setStages={setStages}\n        currentRunPath={currentJobPath + run.id + \"/\"}\n        layout={layout}\n        collapsed={true}\n      />\n    </div>\n  );\n}\n\ninterface SingleRunProps {\n  run: RunInfo;\n  currentJobPath: string;\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { RunInfo } from \"./MultiPipelineGraphModel.ts\";\nimport startPollingRunsStatus from \"./support/startPollingRunsStatus.ts\";\nimport SingleRun from \"./SingleRun.tsx\";\nimport { I18NContext } from \"../../../common/i18n/i18n-provider.tsx\";\n\nexport const MultiPipelineGraph = () => {\n  const [runs, setRuns] = useState<Array<RunInfo>>([]);\n  const [poll, setPoll] = useState(false);\n\n  const rootElement = document.getElementById(\"multiple-pipeline-root\");\n  const currentJobPath = rootElement?.dataset.currentJobPath!;\n\n  useEffect(() => {\n    if (!poll) {\n      setPoll(true);\n      startPollingRunsStatus(currentJobPath, setRuns, (err) => {\n        console.log(err);\n      });\n    }\n  }, [runs, poll]);\n\n  const groupedRuns: Record<string, RunInfo[]> = runs.reduce(\n    (acc: Record<string, RunInfo[]>, run) => {\n      const date = new Date(run.timestamp).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      });\n\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(run);\n\n      return acc;\n    },\n    {},\n  );\n\n  const translations = useContext(I18NContext);\n\n  return (\n    <>\n      {Object.keys(groupedRuns).length === 0 ? (\n        <div className=\"pgv-stages__group\">\n          <div className=\"pgv-stages__heading\">\n            {translations.get(\"noBuilds\")()}\n          </div>\n        </div>\n      ) : (\n        Object.entries(groupedRuns).map(([date, runsOnDate]) => (\n          <div className={\"pgv-stages__group\"} key={date}>\n            <p className=\"pgv-stages__heading\">{date}</p>\n            {runsOnDate.map((run) => (\n              <SingleRun\n                key={run.id}\n                run={run}\n                currentJobPath={currentJobPath}\n              />\n            ))}\n          </div>\n        ))\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport { FunctionComponent } from \"react\";\n\nimport { MultiPipelineGraph } from \"./multi-pipeline-graph/main/index.ts\";\n\nimport \"./app.scss\";\nimport \"./multi-pipeline-graph/styles/main.scss\";\nimport { I18NProvider } from \"../common/i18n/i18n-provider.tsx\";\nimport { ResourceBundleName } from \"../common/i18n/translations.ts\";\n\nconst App: FunctionComponent = () => {\n  const locale =\n    document.getElementById(\"multiple-pipeline-root\")?.dataset.userLocale ??\n    \"en\";\n  return (\n    <div>\n      <I18NProvider\n        bundles={[ResourceBundleName.messages, ResourceBundleName.timing]}\n        locale={locale}\n      >\n        <MultiPipelineGraph />\n      </I18NProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOMClient from \"react-dom/client\";\nimport App from \"./app.tsx\";\n\nconst rootElement = document.getElementById(\"multiple-pipeline-root\");\nif (!rootElement)\n  throw new Error(\"Failed to find the 'multiple-pipeline-root' element\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\n// Render App\nroot.render(<App />);\n"],"names":["startPollingRunsStatus","pathPrefix","onFetchSuccess","onFetchError","interval","path","fetchPipelineData","result","err","SingleRun","run","currentJobPath","stages","setStages","useState","layout","defaultLayout","jsxs","jsx","StatusIcon","time","Total","PipelineGraph","MultiPipelineGraph","runs","setRuns","poll","setPoll","rootElement","useEffect","groupedRuns","acc","date","translations","useContext","I18NContext","Fragment","runsOnDate","App","locale","_a","I18NProvider","ResourceBundleName","root","ReactDOMClient"],"mappings":"2PAMA,SAAwBA,EACtBC,EACAC,EACAC,EACAC,EAAW,IACX,CACA,IAAIC,EAAOJ,EAAa,4BAExB,eAAeK,GAAoB,CAC7B,GAAA,CAEI,MAAAC,EAAS,MADH,MAAM,MAAMF,CAAI,GACH,KAAK,EAC9BH,EAAeK,EAAO,IAAI,QACnBC,EAAK,CAEZL,EAAaK,CAAG,CAAA,QAChB,CACW,WAAA,IAAMF,EAAkB,EAAGF,CAAQ,CAAA,CAChD,CAEgBE,EAAA,CACpB,CCfA,SAAwBG,EAAU,CAAE,IAAAC,EAAK,eAAAC,GAAkC,CACzE,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAA2B,CAAA,CAAE,EAEnDC,EAAqB,CACzB,GAAGC,EACH,aAAc,EAChB,EAGE,OAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,iBACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CACC,gBAAC,IAAE,CAAA,KAAMP,EAAiBD,EAAI,GAAI,UAAU,0BAC1C,SAAA,CAACQ,EAAAA,IAAAC,EAAA,CAAW,OAAQT,EAAI,MAAQ,CAAA,EAC/BA,EAAI,mBACJ,OACE,CAAA,SAAA,CAAAU,EAAKV,EAAI,SAAS,EAAE,MAAIQ,EAAAA,IAAAG,EAAA,CAAM,GAAIX,EAAI,QAAU,CAAA,CAAA,CACnD,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACAQ,EAAA,IAACI,EAAA,CACC,OAAAV,EACA,UAAAC,EACA,eAAgBF,EAAiBD,EAAI,GAAK,IAC1C,OAAAK,EACA,UAAW,EAAA,CAAA,CACb,EACF,CAEJ,CClCO,MAAMQ,EAAqB,IAAM,CACtC,KAAM,CAACC,EAAMC,CAAO,EAAIX,EAAAA,SAAyB,CAAA,CAAE,EAC7C,CAACY,EAAMC,CAAO,EAAIb,EAAAA,SAAS,EAAK,EAEhCc,EAAc,SAAS,eAAe,wBAAwB,EAC9DjB,EAAiBiB,GAAA,YAAAA,EAAa,QAAQ,eAE5CC,EAAAA,UAAU,IAAM,CACTH,IACHC,EAAQ,EAAI,EACW3B,EAAAW,EAAgBc,EAAUjB,GAAQ,CACvD,QAAQ,IAAIA,CAAG,CAAA,CAChB,EACH,EACC,CAACgB,EAAME,CAAI,CAAC,EAEf,MAAMI,EAAyCN,EAAK,OAClD,CAACO,EAAgCrB,IAAQ,CACvC,MAAMsB,EAAO,IAAI,KAAKtB,EAAI,SAAS,EAAE,mBAAmB,QAAS,CAC/D,KAAM,UACN,MAAO,OACP,IAAK,SAAA,CACN,EAEG,OAACqB,EAAIC,CAAI,IACPD,EAAAC,CAAI,EAAI,CAAC,GAEXD,EAAAC,CAAI,EAAE,KAAKtB,CAAG,EAEXqB,CACT,EACA,CAAA,CACF,EAEME,EAAeC,aAAWC,CAAW,EAE3C,OAEKjB,EAAA,IAAAkB,EAAA,SAAA,CAAA,SAAA,OAAO,KAAKN,CAAW,EAAE,SAAW,EAClCZ,EAAAA,IAAA,MAAA,CAAI,UAAU,oBACb,SAAAA,MAAC,MAAI,CAAA,UAAU,sBACZ,SAAae,EAAA,IAAI,UAAU,IAC9B,CACF,CAAA,EAEA,OAAO,QAAQH,CAAW,EAAE,IAAI,CAAC,CAACE,EAAMK,CAAU,IAC/CpB,EAAAA,KAAA,MAAA,CAAI,UAAW,oBACd,SAAA,CAACC,EAAA,IAAA,IAAA,CAAE,UAAU,sBAAuB,SAAKc,EAAA,EACxCK,EAAW,IAAK3B,GACfQ,EAAA,IAACT,EAAA,CAEC,IAAAC,EACA,eAAAC,CAAA,EAFKD,EAAI,EAIZ,CAAA,CAAA,GARuCsB,CAS1C,CACD,EAEL,CAEJ,ECxDMM,EAAyB,IAAM,OACnC,MAAMC,IACJC,EAAA,SAAS,eAAe,wBAAwB,IAAhD,YAAAA,EAAmD,QAAQ,aAC3D,KACF,aACG,MACC,CAAA,SAAAtB,EAAA,IAACuB,EAAA,CACC,QAAS,CAACC,EAAmB,SAAUA,EAAmB,MAAM,EAChE,OAAAH,EAEA,eAAChB,EAAmB,CAAA,CAAA,CAAA,CAAA,EAExB,CAEJ,ECpBMK,EAAc,SAAS,eAAe,wBAAwB,EACpE,GAAI,CAACA,EACG,MAAA,IAAI,MAAM,qDAAqD,EACvE,MAAMe,EAAOC,EAAe,WAAWhB,CAAW,EAGlDe,EAAK,OAAQzB,EAAAA,IAAAoB,EAAA,CAAI,CAAA,CAAE"}