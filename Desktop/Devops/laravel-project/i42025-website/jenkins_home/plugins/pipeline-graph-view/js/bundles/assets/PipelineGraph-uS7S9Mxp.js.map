{"version":3,"file":"PipelineGraph-uS7S9Mxp.js","sources":["../../../../frontend/pipeline-graph-view/pipeline-graph/main/support/nodes.tsx","../../../../frontend/pipeline-graph-view/pipeline-graph/main/support/convertLabelToTooltip.tsx","../../../../frontend/pipeline-graph-view/pipeline-graph/main/support/labels.tsx","../../../../frontend/pipeline-graph-view/pipeline-graph/main/PipelineGraph.tsx"],"sourcesContent":["import React from \"react\";\nimport { CSSProperties } from \"react\";\n\nimport {\n  LayoutInfo,\n  NodeColumn,\n  NodeInfo,\n  StageInfo,\n} from \"../PipelineGraphModel.tsx\";\nimport StatusIcon, {\n  resultToColor,\n} from \"../../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../../common/components/tooltip.tsx\";\nimport { Total } from \"../../../../common/utils/timings.tsx\";\nimport \"./nodes.scss\";\nimport { CounterNodeInfo } from \"../PipelineGraphLayout.ts\";\n\ntype SVGChildren = Array<any>; // Fixme: Maybe refine this? Not sure what should go here, we have working code I can't make typecheck\n\ninterface NodeProps {\n  node: NodeInfo;\n  collapsed?: boolean;\n}\n\n/**\n * Generate the SVG elements to represent a node.\n */\nexport function Node({ node, collapsed }: NodeProps) {\n  const key = node.key;\n\n  if (node.isPlaceholder) {\n    if (node.type === \"counter\") {\n      const mappedNode = node as CounterNodeInfo;\n\n      const tooltip = (\n        <ol className=\"pgv-node__counter-tooltip\">\n          {mappedNode.stages.map((stage) => (\n            <li key={stage.id}>\n              <a\n                className={\"jenkins-button jenkins-button--tertiary\"}\n                href={document.head.dataset.rooturl + stage.url}\n              >\n                <StatusIcon\n                  status={stage.state}\n                  percentage={stage.completePercent}\n                  skeleton={stage.skeleton}\n                />\n                {stage.name}\n                <span style={{ color: \"var(--text-color-secondary)\" }}>\n                  <Total ms={stage.totalDurationMillis} />\n                </span>\n              </a>\n            </li>\n          ))}\n        </ol>\n      );\n\n      return (\n        <Tooltip content={tooltip} interactive appendTo={document.body}>\n          <div\n            key={key}\n            style={{\n              position: \"absolute\",\n              top: node.y,\n              left: node.x,\n              translate: \"-50% -50%\",\n            }}\n            className={\"PWGx-pipeline-node\"}\n          >\n            <span className={\"PWGx-pipeline-node-counter\"}>\n              {mappedNode.stages.length}\n            </span>\n          </div>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <div\n        key={key}\n        style={{\n          position: \"absolute\",\n          top: node.y,\n          left: node.x,\n          translate: \"-50% -50%\",\n        }}\n        className=\"PWGx-pipeline-node\"\n      >\n        <span className={\"PWGx-pipeline-node-terminal\"}></span>\n      </div>\n    );\n  }\n\n  const groupChildren: SVGChildren = [];\n  const { title, state, url } = node.stage ?? {};\n  groupChildren.push(\n    <StatusIcon\n      key={`icon-${node.id}`}\n      status={node.stage.state}\n      percentage={node.stage.completePercent}\n      skeleton={node.stage.skeleton}\n    />,\n  );\n\n  const clickable =\n    !node.isPlaceholder &&\n    node.stage?.state !== \"skipped\" &&\n    !node.stage.skeleton;\n\n  // Most of the nodes are in shared code, so they're rendered at 0,0. We transform with a <g> to position them\n  const groupProps = {\n    key,\n    style: {\n      position: \"absolute\",\n      top: node.y,\n      left: node.x,\n      translate: \"-50% -50%\",\n    } as CSSProperties,\n    className:\n      \"PWGx-pipeline-node PWGx-pipeline-node--\" +\n      state +\n      \" \" +\n      resultToColor(node.stage.state, node.stage.skeleton),\n  };\n\n  let tooltip: React.ReactElement | undefined;\n  if (collapsed) {\n    tooltip = (\n      <div className=\"pgv-node-tooltip\">\n        <div>{title}</div>\n        <div>\n          <Total ms={node.stage.totalDurationMillis} />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Tooltip content={tooltip}>\n      <div {...groupProps}>\n        {groupChildren}\n        {clickable && (\n          <a href={document.head.dataset.rooturl + url}>\n            <span className=\"jenkins-visually-hidden\">{title}</span>\n          </a>\n        )}\n      </div>\n    </Tooltip>\n  );\n}\n\ninterface SelectionHighlightProps {\n  layout: LayoutInfo;\n  nodeColumns: Array<NodeColumn>;\n  isStageSelected: (stage: StageInfo) => boolean;\n}\n\n/**\n * Generates SVG for visual highlight to show which node is selected.\n */\nexport function SelectionHighlight({\n  layout,\n  nodeColumns,\n  isStageSelected,\n}: SelectionHighlightProps) {\n  const { nodeRadius, connectorStrokeWidth } = layout;\n  const highlightRadius = Math.ceil(\n    nodeRadius + 0.5 * connectorStrokeWidth + 1,\n  );\n  let selectedNode: NodeInfo | undefined;\n\n  columnLoop: for (const column of nodeColumns) {\n    for (const row of column.rows) {\n      for (const node of row) {\n        if (!node.isPlaceholder && isStageSelected(node.stage)) {\n          selectedNode = node;\n          break columnLoop;\n        }\n      }\n    }\n  }\n\n  if (!selectedNode) return null;\n\n  const transform = `translate(${selectedNode.x} ${selectedNode.y})`;\n\n  return (\n    <g\n      className=\"PWGx-pipeline-selection-highlight\"\n      transform={transform}\n      key=\"selection-highlight\"\n    >\n      <circle r={highlightRadius} strokeWidth={connectorStrokeWidth} />\n    </g>\n  );\n}\n","import React from \"react\";\nimport Tooltip from \"../../../../common/components/tooltip.tsx\";\n\ntype MatrixValue = {\n  key: string;\n  value: string;\n};\n\nexport function convertLabelToTooltip(content: string): string | MatrixValue[] {\n  if (content.startsWith(\"Matrix -\")) {\n    return content\n      .replace(\"Matrix - \", \"\")\n      .split(\",\")\n      .map((element) => {\n        const result = element.split(\"=\");\n        return {\n          key: result[0].trim(),\n          value: result[1].trim().replace(/'/g, \"\"),\n        };\n      });\n  }\n  return content;\n}\n\nexport type TooltipLabelProps = {\n  content: string;\n  children: React.ReactElement;\n};\n\nexport function TooltipLabel(props: TooltipLabelProps) {\n  const result = convertLabelToTooltip(props.content);\n\n  if (typeof result === \"string\") {\n    return (\n      <>\n        <Tooltip\n          content={result as string}\n          interactive={true}\n          followCursor={true}\n        >\n          {props.children}\n        </Tooltip>\n      </>\n    );\n  }\n\n  const table = (\n    <table>\n      {(result as MatrixValue[]).map((val, key) => {\n        return (\n          <tr key={key}>\n            <td>{val.key}</td>\n            <td>{val.value}</td>\n          </tr>\n        );\n      })}\n    </table>\n  );\n\n  return (\n    <>\n      <Tooltip content={table} interactive={true}>\n        {props.children}\n      </Tooltip>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { nodeStrokeWidth } from \"../support/StatusIcons.tsx\";\nimport { TruncatingLabel } from \"../support/TruncatingLabel.tsx\";\nimport {\n  NodeLabelInfo,\n  LayoutInfo,\n  StageInfo,\n} from \"../PipelineGraphModel.tsx\";\nimport { sequentialStagesLabelOffset } from \"../PipelineGraphLayout.ts\";\n\nimport { TooltipLabel } from \"./convertLabelToTooltip.tsx\";\n\ninterface RenderBigLabelProps {\n  details: NodeLabelInfo;\n  layout: LayoutInfo;\n  measuredHeight: number;\n  selectedStage?: StageInfo;\n  isStageSelected: (stage?: StageInfo) => boolean;\n}\n\n/**\n * Generate the Component for a big label\n */\nexport function BigLabel({\n  details,\n  layout,\n  measuredHeight,\n  isStageSelected,\n  selectedStage,\n}: RenderBigLabelProps) {\n  /**\n   * Is any child of this stage currently selected?\n   */\n  function isStageChildSelected(stage?: StageInfo, selectedStage?: StageInfo) {\n    if (stage) {\n      const { children } = stage;\n\n      if (children && selectedStage) {\n        for (const childStage of children) {\n          let currentStage: StageInfo | undefined = childStage;\n\n          while (currentStage) {\n            if (currentStage.id === selectedStage.id) {\n              return true;\n            }\n            currentStage = currentStage.nextSibling;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  const { nodeSpacingH, labelOffsetV, connectorStrokeWidth, ypStart } = layout;\n\n  const labelWidth = nodeSpacingH - connectorStrokeWidth * 2;\n  const labelHeight = ypStart - labelOffsetV;\n  const labelOffsetH = Math.floor(labelWidth / -2);\n\n  // These are about layout more than appearance, so they should probably remain inline\n  const bigLabelStyle = {\n    position: \"absolute\",\n    width: labelWidth,\n    maxHeight: labelHeight + \"px\",\n    textAlign: \"center\",\n    marginLeft: labelOffsetH,\n  };\n\n  const x = details.x;\n  const bottom = measuredHeight - details.y + labelOffsetV;\n\n  // These are about layout more than appearance, so they're inline\n  const style = {\n    ...bigLabelStyle,\n    bottom: bottom + \"px\",\n    left: x + \"px\",\n  };\n\n  const classNames = [\"PWGx-pipeline-big-label\"];\n  if (\n    isStageSelected(details.stage) ||\n    isStageChildSelected(details.stage, selectedStage)\n  ) {\n    classNames.push(\"selected\");\n  }\n  if (details.stage && details.stage.synthetic) {\n    classNames.push(\"pgv-graph-node--synthetic\");\n  }\n  if (details.stage?.skeleton) {\n    classNames.push(\"pgv-graph-node--skeleton\");\n  }\n  if (details.node.id < 0) {\n    classNames.push(\"pgv-graph-node--skeleton\");\n  }\n\n  return (\n    <TruncatingLabel\n      className={classNames.join(\" \")}\n      style={style}\n      key={details.key}\n    >\n      {details.text}\n    </TruncatingLabel>\n  );\n}\n\ninterface SmallLabelProps {\n  details: NodeLabelInfo;\n  layout: LayoutInfo;\n  isStageSelected: (stage?: StageInfo) => boolean;\n}\n\n/**\n * Generate the Component for a small label\n */\nexport function SmallLabel({\n  details,\n  layout,\n  isStageSelected,\n}: SmallLabelProps) {\n  const {\n    nodeSpacingH,\n    nodeSpacingV,\n    curveRadius,\n    connectorStrokeWidth,\n    nodeRadius,\n    smallLabelOffsetV,\n  } = layout;\n\n  const smallLabelWidth = Math.floor(\n    nodeSpacingH - 2 * curveRadius - 2 * connectorStrokeWidth,\n  ); // Fit between lines\n  const smallLabelHeight = Math.floor(\n    nodeSpacingV - smallLabelOffsetV - nodeRadius - nodeStrokeWidth,\n  );\n  const smallLabelOffsetH = Math.floor(smallLabelWidth * -0.5);\n\n  const x = details.x + smallLabelOffsetH;\n  const top = details.y + smallLabelOffsetV;\n\n  // These are about layout more than appearance, so they're inline\n  const style = {\n    top: top,\n    left: x,\n    position: \"absolute\",\n    width: smallLabelWidth,\n    maxHeight: smallLabelHeight,\n    textAlign: \"center\",\n  };\n\n  const classNames = [\"PWGx-pipeline-small-label\"];\n  if (details.stage && isStageSelected(details.stage)) {\n    classNames.push(\"selected\");\n  }\n\n  return (\n    <TruncatingLabel\n      className={classNames.join(\" \")}\n      style={style}\n      key={details.key}\n    >\n      {details.text}\n    </TruncatingLabel>\n  );\n}\n\ninterface SequentialContainerLabelProps {\n  details: NodeLabelInfo;\n  layout: LayoutInfo;\n}\n\n/**\n * Generate the Component for a small label denoting the name of the container of a group of sequential parallel stages\n */\nexport function SequentialContainerLabel({\n  details,\n  layout,\n}: SequentialContainerLabelProps) {\n  const { nodeRadius } = layout;\n\n  const seqContainerName = details.text;\n  const y = details.y;\n  const x = details.x - Math.floor(nodeRadius * 2); // Because label X is a \"node center\"-relative position\n\n  const lineHeight = 1.35;\n\n  const containerStyle = {\n    top: y,\n    left: x,\n    lineHeight,\n    marginTop: `-${lineHeight / 2}em`,\n    position: \"absolute\" as const,\n    maxWidth: sequentialStagesLabelOffset,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    background: \"var(--card-background)\",\n    fontSize: \"0.8125rem\",\n    fontWeight: \"var(--font-bold-weight)\",\n    padding: \"0 5px\",\n    whiteSpace: \"nowrap\" as const,\n  };\n\n  return (\n    <TooltipLabel content={seqContainerName}>\n      <div style={containerStyle} key={details.key}>\n        {seqContainerName}\n      </div>\n    </TooltipLabel>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  CompositeConnection,\n  defaultLayout,\n  NodeLabelInfo,\n  LayoutInfo,\n  NodeColumn,\n  StageInfo,\n} from \"./PipelineGraphModel.tsx\";\nimport { layoutGraph } from \"./PipelineGraphLayout.ts\";\nimport { Result } from \"./PipelineGraphModel.tsx\";\nimport { Node, SelectionHighlight } from \"./support/nodes.tsx\";\nimport {\n  BigLabel,\n  SmallLabel,\n  SequentialContainerLabel,\n} from \"./support/labels.tsx\";\nimport { GraphConnections } from \"./support/connections.tsx\";\nimport useRunPoller from \"../../../common/tree-api.ts\";\n\nexport function PipelineGraph(props: Props) {\n  const {\n    stages = [],\n    layout,\n    setStages,\n    selectedStage,\n    currentRunPath,\n    previousRunPath,\n    collapsed,\n  } = props;\n\n  const { run } = useRunPoller({\n    currentRunPath: currentRunPath,\n    previousRunPath: previousRunPath,\n  });\n\n  const [nodeColumns, setNodeColumns] = useState<NodeColumn[]>([]);\n  const [connections, setConnections] = useState<CompositeConnection[]>([]);\n  const [bigLabels, setBigLabels] = useState<NodeLabelInfo[]>([]);\n  const [smallLabels, setSmallLabels] = useState<NodeLabelInfo[]>([]);\n  const [branchLabels, setBranchLabels] = useState<NodeLabelInfo[]>([]);\n  const [measuredWidth, setMeasuredWidth] = useState<number>(0);\n  const [measuredHeight, setMeasuredHeight] = useState<number>(0);\n  const [layoutState, setLayoutState] = useState<LayoutInfo>({\n    ...defaultLayout,\n    ...layout,\n  });\n  const [currentSelectedStage, setCurrentSelectedStage] = useState<\n    StageInfo | undefined\n  >(selectedStage);\n\n  useEffect(() => {\n    if (run) {\n      updateLayout(run.stages);\n\n      if (setStages) {\n        setStages(run.stages);\n      }\n    }\n  }, [run]);\n\n  useEffect(() => {\n    let needsLayout = false;\n    let newLayoutState = layoutState;\n\n    if (layout !== props.layout) {\n      newLayoutState = { ...defaultLayout, ...layout };\n      setLayoutState(newLayoutState);\n      needsLayout = true;\n    }\n\n    if (selectedStage !== currentSelectedStage) {\n      setCurrentSelectedStage(selectedStage);\n    }\n\n    if (stages !== props.stages) {\n      needsLayout = true;\n    }\n\n    if (needsLayout) {\n      updateLayout(stages);\n    }\n  }, [layout, selectedStage, stages]);\n\n  const updateLayout = (newStages: StageInfo[] = []) => {\n    const newLayout = layoutGraph(newStages, layoutState, collapsed ?? false);\n    setNodeColumns(newLayout.nodeColumns);\n    setConnections(newLayout.connections);\n    setBigLabels(newLayout.bigLabels);\n    setSmallLabels(newLayout.smallLabels);\n    setBranchLabels(newLayout.branchLabels);\n    setMeasuredWidth(newLayout.measuredWidth);\n    setMeasuredHeight(newLayout.measuredHeight);\n  };\n\n  const stageIsSelected = (stage?: StageInfo): boolean => {\n    return (\n      (currentSelectedStage && stage && currentSelectedStage.id === stage.id) ||\n      false\n    );\n  };\n\n  const nodes = nodeColumns.flatMap((column) => {\n    const topStageState = column.topStage?.state ?? Result.unknown;\n\n    return column.rows.flatMap((row) =>\n      row.map((node) => {\n        if (\n          column.topStage &&\n          \"stage\" in node &&\n          node.stage &&\n          Array.isArray(column.topStage.children) &&\n          column.topStage.children.includes(node.stage) &&\n          collapsed\n        ) {\n          node.stage.state = topStageState;\n        }\n\n        return node;\n      }),\n    );\n  });\n\n  const outerDivStyle = {\n    position: \"relative\" as const,\n    overflow: \"visible\" as const,\n  };\n\n  return (\n    <div className=\"PWGx-PipelineGraph-container\">\n      <div style={outerDivStyle} className=\"PWGx-PipelineGraph\">\n        <svg width={measuredWidth} height={measuredHeight}>\n          <GraphConnections connections={connections} layout={layoutState} />\n\n          <SelectionHighlight\n            layout={layoutState}\n            nodeColumns={nodeColumns}\n            isStageSelected={stageIsSelected}\n          />\n        </svg>\n\n        {nodes.map((node) => (\n          <Node key={node.id} node={node} collapsed={collapsed} />\n        ))}\n\n        {bigLabels.map((label) => (\n          <BigLabel\n            key={label.key}\n            details={label}\n            layout={layoutState}\n            measuredHeight={measuredHeight}\n            selectedStage={currentSelectedStage}\n            isStageSelected={stageIsSelected}\n          />\n        ))}\n\n        {smallLabels.map((label) => (\n          <SmallLabel\n            key={label.key}\n            details={label}\n            layout={layoutState}\n            isStageSelected={stageIsSelected}\n          />\n        ))}\n\n        {branchLabels.map((label) => (\n          <SequentialContainerLabel\n            key={label.key}\n            details={label}\n            layout={layoutState}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface Props {\n  stages: Array<StageInfo>;\n  layout?: Partial<LayoutInfo>;\n  setStages?: (stages: Array<StageInfo>) => void;\n  selectedStage?: StageInfo;\n  /**\n   * Path of the current run\n   */\n  currentRunPath: string;\n  /**\n   * Optional path of the previous run\n   */\n  previousRunPath?: string;\n  collapsed?: boolean;\n}\n"],"names":["Node","node","collapsed","key","mappedNode","tooltip","jsx","stage","jsxs","StatusIcon","Total","Tooltip","groupChildren","title","state","url","clickable","_a","groupProps","resultToColor","SelectionHighlight","layout","nodeColumns","isStageSelected","nodeRadius","connectorStrokeWidth","highlightRadius","selectedNode","columnLoop","column","row","transform","convertLabelToTooltip","content","element","result","TooltipLabel","props","Fragment","table","val","BigLabel","details","measuredHeight","selectedStage","isStageChildSelected","children","childStage","currentStage","nodeSpacingH","labelOffsetV","ypStart","labelWidth","labelHeight","labelOffsetH","bigLabelStyle","x","bottom","style","classNames","TruncatingLabel","SmallLabel","nodeSpacingV","curveRadius","smallLabelOffsetV","smallLabelWidth","smallLabelHeight","nodeStrokeWidth","smallLabelOffsetH","SequentialContainerLabel","seqContainerName","y","lineHeight","containerStyle","sequentialStagesLabelOffset","PipelineGraph","stages","setStages","currentRunPath","previousRunPath","run","useRunPoller","setNodeColumns","useState","connections","setConnections","bigLabels","setBigLabels","smallLabels","setSmallLabels","branchLabels","setBranchLabels","measuredWidth","setMeasuredWidth","setMeasuredHeight","layoutState","setLayoutState","defaultLayout","currentSelectedStage","setCurrentSelectedStage","useEffect","updateLayout","needsLayout","newLayoutState","newStages","newLayout","layoutGraph","stageIsSelected","nodes","topStageState","Result","outerDivStyle","GraphConnections","label"],"mappings":"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"}